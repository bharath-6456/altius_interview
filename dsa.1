#include <bits/stdc++.h>
using namespace std;


int largestRec(vector<int>& heights, int n) {
       
        if (n==0) return 0;
        vector<int> l(n),  r(n);
        r[n-1]=n, l[0]=-1;

        for(int i=1; i<n; i++){
            int p=i-1;
            while(p>=0 && heights[p]>=heights[i])
                p=l[p];
            l[i]=p;
        }

        int maxA=heights[n-1]*(r[n-1]-l[n-1]-1);
        for(int i=n-2; i>=0; i--){
            int p=i+1;
            while(p<n && heights[p]>=heights[i])
                p=r[p];
            r[i]=p;
            maxA=max(maxA, heights[i]*(r[i]-l[i]-1));
        }
    
        return maxA;
    }
    int solve(vector<vector<char>>& matrix) {

        int n=matrix.size();
        int m=matrix[0].size();
         if (n==1 && m==1) return matrix[0][0]=='1';

      vector<int>h(m);

      int mera=0;
      for(int r=0;r<n;r++){
        for(int c=0;c<m;c++){
            if(matrix[r][c]=='0'){
                h[c]=0;
            }else{
                h[c]+=1;
            }
        }
        mera=max(mera,largestRec(h,m));
      }


return mera;

    }


int main() { 
  int n,m;
  cin>>n>>m;
  vector<vector<char>>matrix(n,vector<char>(m));
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      cin>>matrix[i][j];
    }
   
  }
  int ans=solve(matrix);
  cout<<ans<<endl;

  
  
}

